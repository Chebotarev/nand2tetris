// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    Not(in=zx, out=nzx);
    And16(a=x, b[0]=nzx, b[1]=nzx, b[2]=nzx, b[3]=nzx, b[4]=nzx, b[5]=nzx,
    b[6]=nzx, b[7]=nzx, b[8]=nzx, b[9]=nzx, b[10]=nzx, b[11]=nzx, b[12]=nzx,
    b[13]=nzx, b[14]=nzx, b[15]=nzx, out=x1);

    Not16(in[0]=nx, in[1]=nx, in[2]=nx, in[3]=nx, in[4]=nx, in[5]=nx, in[6]=nx,
    in[7]=nx, in[8]=nx, in[9]=nx, in[10]=nx, in[11]=nx, in[12]=nx, in[13]=nx,
    in[14]=nx,in[15]=nx, out=nnx);
    And16(a=x1, b=nnx, out=x2);

    Not16(in=x1, out=nx1);
    And16(a=nx1, b[0]=nx, b[1]=nx, b[2]=nx, b[3]=nx, b[4]=nx, b[5]=nx,
    b[6]=nx, b[7]=nx, b[8]=nx, b[9]=nx, b[10]=nx, b[11]=nx, b[12]=nx,
    b[13]=nx, b[14]=nx, b[15]=nx, out=x3);

    Or16(a=x2, b=x3, out=x4);

    Not(in=zy, out=nzy);
    And16(a=y, b[0]=nzy, b[1]=nzy, b[2]=nzy, b[3]=nzy, b[4]=nzy, b[5]=nzy,
    b[6]=nzy, b[7]=nzy, b[8]=nzy, b[9]=nzy, b[10]=nzy, b[11]=nzy, b[12]=nzy,
    b[13]=nzy, b[14]=nzy, b[15]=nzy, out=y1);

    Not16(in[0]=ny, in[1]=ny, in[2]=ny, in[3]=ny, in[4]=ny, in[5]=ny, in[6]=ny,
    in[7]=ny, in[8]=ny, in[9]=ny, in[10]=ny, in[11]=ny, in[12]=ny, in[13]=ny,
    in[14]=ny,in[15]=ny, out=nny);
    And16(a=y1, b=nny, out=y2);

    Not16(in=y1, out=ny1);
    And16(a=ny1, b[0]=ny, b[1]=ny, b[2]=ny, b[3]=ny, b[4]=ny, b[5]=ny,
    b[6]=ny, b[7]=ny, b[8]=ny, b[9]=ny, b[10]=ny, b[11]=ny, b[12]=ny,
    b[13]=ny, b[14]=ny, b[15]=ny, out=y3);

    Or16(a=y2, b=y3, out=y4);

    Add16(a=x4, b=y4, out=xplusy);
    And16(a=x4, b=y4, out=xandy);

    And16(a=xplusy, b[0]=f, b[1]=f, b[2]=f, b[3]=f, b[4]=f, b[5]=f,
    b[6]=f, b[7]=f, b[8]=f, b[9]=f, b[10]=f, b[11]=f, b[12]=f,
    b[13]=f, b[14]=f, b[15]=f, out=fxplusy);

    Not16(in[0]=f, in[1]=f, in[2]=f, in[3]=f, in[4]=f, in[5]=f, in[6]=f,
    in[7]=f, in[8]=f, in[9]=f, in[10]=f, in[11]=f, in[12]=f, in[13]=f, in[14]=f,
    in[15]=f, out=nf);
    And16(a=xandy, b=nf, out=fxandy);

    Or16(a=fxplusy, b=fxandy, out=out1);

    Not(in=no, out=nno);
    And16(a=out1, b[0]=nno, b[1]=nno, b[2]=nno, b[3]=nno, b[4]=nno, b[5]=nno,
    b[6]=nno, b[7]=nno, b[8]=nno, b[9]=nno, b[10]=nno, b[11]=nno, b[12]=nno,
    b[13]=nno, b[14]=nno, b[15]=nno, out=out2);

    Not16(in=out1, out=nout1);
    And16(a=nout1, b[0]=no, b[1]=no, b[2]=no, b[3]=no, b[4]=no, b[5]=no,
    b[6]=no, b[7]=no, b[8]=no, b[9]=no, b[10]=no, b[11]=no, b[12]=no,
    b[13]=no, b[14]=no, b[15]=no, out=out3);

    Or16(a=out2, b=out3, out=out, out=finalout, out[15]=finalout15);

    Not16(in=finalout, out[0]=nfinalout0, out[1]=nfinalout1, out[2]=nfinalout2,
    out[3]=nfinalout3, out[4]=nfinalout4, out[5]=nfinalout5, out[6]=nfinalout6,
    out[7]=nfinalout7, out[8]=nfinalout8, out[9]=nfinalout9,
    out[10]=nfinalout10, out[11]=nfinalout11, out[12]=nfinalout12,
    out[13]=nfinalout13, out[14]=nfinalout14, out[15]=nfinalout15);

    And(a=nfinalout0, b=nfinalout1, out=and1);
    And(a=nfinalout2, b=nfinalout3, out=and2);
    And(a=nfinalout4, b=nfinalout5, out=and3);
    And(a=nfinalout6, b=nfinalout7, out=and4);
    And(a=nfinalout8, b=nfinalout9, out=and5);
    And(a=nfinalout10, b=nfinalout11, out=and6);
    And(a=nfinalout12, b=nfinalout13, out=and7);
    And(a=nfinalout14, b=nfinalout15, out=and8);

    And(a=and1, b=and2, out=and9);
    And(a=and3, b=and4, out=and10);
    And(a=and5, b=and6, out=and11);
    And(a=and7, b=and8, out=and12);

    And(a=and9, b=and10, out=and13);
    And(a=and11, b=and12, out=and14);

    And(a=and13, b=and14, out=zr);

    And(a=finalout15, b=true, out=ng);
}
